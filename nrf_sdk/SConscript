# for nRF5_SDK module compiling
from building import *
import os
Import('rtconfig')

# nrfx_hal
cwd  = GetCurrentDir() + '/modules/nrfx/'
src = Glob('./modules/nrfx/drivers/src/*.c')
path = []
define = []

#include
path += [cwd]
path += [cwd + 'drivers']
path += [cwd + 'drivers/include']
path += [cwd + 'drivers/src']
path += [cwd + 'soc']
path += [cwd + 'mdk']
path += [cwd + 'hal']


#chip toolchain
if GetDepend('SOC_NRF52840') == True:
	define += ['NRF52840_XXAA']
	src += [cwd + 'mdk/system_nrf52840.c']
	src += [cwd + 'mdk/arm_startup_nrf52840.s']
	if rtconfig.PLATFORM == 'armcc':
		src += [cwd + 'mdk/arm_startup_nrf52840.s']
		
	if rtconfig.PLATFORM == 'gcc':
		src += [cwd + 'mdk/gcc_startup_nrf52840.S']
		
	if rtconfig.PLATFORM == 'iar':
		D_SRC += [cwd + 'mdk/iar_startup_nrf52840.s']

elif GetDepend('SOC_NRF52833') == True:
	define += ['NRF52833_XXAA']
	src += [cwd + 'mdk/system_nrf52833.c']
	
	if rtconfig.PLATFORM == 'armcc':
		src += [cwd + 'mdk/arm_startup_nrf52833.s']
		
	if rtconfig.PLATFORM == 'gcc':
		src += [cwd + 'mdk/gcc_startup_nrf52833.S']
		
	if rtconfig.PLATFORM == 'iar':
		D_SRC += [cwd + 'mdk/iar_startup_nrf52833.s']

elif GetDepend('SOC_NRF52832') == True:
	define += ['NRF52832_XXAA']
	src += [cwd + 'mdk/system_nrf52.c']
	
	if rtconfig.PLATFORM == 'armcc':
		src += [cwd + 'mdk/arm_startup_nrf52.s']
		
	if rtconfig.PLATFORM == 'gcc':
		src += [cwd + 'mdk/gcc_startup_nrf52.S']
		
	if rtconfig.PLATFORM == 'iar':
		D_SRC += [cwd + 'mdk/iar_startup_nrf52.s']
        
        
elif GetDepend('SOC_NRF51822') == True:
	define += ['NRF51822_XXAA']
	src += [cwd + 'mdk/system_nrf51.c']
	
	if rtconfig.PLATFORM == 'armcc':
		src += [cwd + 'mdk/arm_startup_nrf51.s']
		
	if rtconfig.PLATFORM == 'gcc':
		src += [cwd + 'mdk/gcc_startup_nrf51.S']
		
	if rtconfig.PLATFORM == 'iar':
		D_SRC += [cwd + 'mdk/iar_startup_nrf51.s']
        
        
elif GetDepend('SOC_NRF5340') == True:
	define += ['NRF5340_XXAA_APPLICATION']
	src += [cwd + '/mdk/system_nrf5340_application.c']
	
	if rtconfig.PLATFORM == 'armcc':
		src += [cwd + 'mdk/arm_startup_nrf5340_application.s']
		
	if rtconfig.PLATFORM == 'gcc':
		src += [cwd + 'mdk/gcc_startup_nrf5340_application.S']
		
	if rtconfig.PLATFORM == 'iar':
		D_SRC += [cwd + 'mdk/iar_startup_nrf5340_application.s']
else:
	pass

# using reset
define += ['CONFIG_GPIO_AS_PINRESET']

# using gpio_te
define += ['NRFX_GPIOTE_ENABLED']

# using clock
define += ['NRFX_CLOCK_ENABLED']

# using uart
    
if GetDepend('BSP_USING_UART') == True:
    if GetDepend('RT_SERIAL_USING_DMA') == True:
        define += ['NRFX_UARTE_ENABLED']
    else:
        define += ['NRFX_UART_ENABLED']


nrf_hal = DefineGroup('nrf_hal', src, depend = [''], CPPPATH = path, CPPDEFINES = define)


# nrfx_drivers
drv_src = []
drv_path = []
drv_define = []

cwd = GetCurrentDir() + '/integration/'

drv_path += [cwd + 'nrfx/legacy']

if GetDepend('USING_NRF_DRIVER') == True:
    drv_src += Glob('./integration/nrfx/legacy/*.c')
    
nrf_drivers = DefineGroup('nrf_drivers', drv_src, depend = [''], CPPPATH = drv_path, CPPDEFINES = drv_define)


# nrfx_libraries
lib_src = []
lib_path = []
lib_define = []
cwd = GetCurrentDir() + '/components/'

# nrf_strerror
lib_path += [cwd + 'libraries/strerror']
lib_src += [cwd + 'libraries/strerror/nrf_strerror.c']
    
# nrf_fprintf
lib_path += [ GetCurrentDir() +'/external/fprintf']
lib_src += Glob('./external/fprintf/*.c')
    
# nrf_memobj
lib_path += [cwd + 'libraries/memobj']
lib_src += [cwd + 'libraries/memobj/nrf_memobj.c']

# nrf_balloc
lib_path += [cwd + 'libraries/balloc']
lib_src += [cwd + 'libraries/balloc/nrf_balloc.c']

# nrf_atomic
lib_path += [cwd + 'libraries/atomic']
lib_src += [cwd + 'libraries/atomic/nrf_atomic.c']

# nrf_section_iter
lib_path += [cwd + 'libraries/experimental_section_vars']
lib_src += [cwd + 'libraries/experimental_section_vars/nrf_section_iter.c']

# nrf_ringbuf
lib_path += [cwd + 'libraries/ringbuf']
lib_src += [cwd + 'libraries/ringbuf/nrf_ringbuf.c']

# nrf_util
lib_path += [cwd + 'libraries/util']
lib_src += [cwd + 'libraries/util/app_error.c']
lib_src += [cwd + 'libraries/util/app_error_weak.c']
lib_src += [cwd + 'libraries/util/app_util_platform.c']
if rtconfig.PLATFORM == 'armcc':
	lib_src += [cwd + 'libraries/util/app_error_handler_keil.c']
elif rtconfig.PLATFORM == 'gcc':
	lib_src += [cwd + 'libraries/util/app_error_handler_gcc.c']	
elif rtconfig.PLATFORM == 'iar':
	lib_src += [cwd + 'libraries/util/app_error_handler_iar.c']

if GetDepend('BSP_USING_SOFTDEVICE') == False:
    lib_path += [cwd + 'drivers_nrf/nrf_soc_nosd']
else:
    #pwr_mgmt
    lib_src += [cwd + 'libraries/pwr_mgmt/nrf_pwr_mgmt.c']
    lib_path += [cwd + 'libraries/pwr_mgmt']
    
    #atomic_fifo
    lib_src += [cwd + 'libraries/atomic_fifo/nrf_atfifo.c']
    lib_path += [cwd + 'libraries/atomic_fifo']
    
    #atomic_flags
    lib_src += [cwd + 'libraries/atomic_flags/nrf_atflags.c']
    lib_path += [cwd + 'libraries/atomic_flags']
    
    #timer
    lib_src += [cwd + 'libraries/timer/app_timer2.c']
    lib_src += [cwd + 'libraries/timer/drv_rtc.c']
    lib_path += [cwd + 'libraries/timer']
    lib_define += ['APP_TIMER_V2']
    lib_define += ['APP_TIMER_V2_RTC1_ENABLED']
    
    #sortlist
    lib_src += [cwd + 'libraries/sortlist/nrf_sortlist.c']
    lib_path += [cwd + 'libraries/sortlist']
    
    #svc
    lib_src += [cwd + 'libraries/svc/nrf_svc_handler.c']
    lib_path += [cwd + 'libraries/svc']
    
    #hci
    lib_src += Glob(cwd + 'libraries/hci/*.c')
    lib_path += [cwd + 'libraries/timer']
    
# nrf_log
if GetDepend('USING_NRF_LOG') == True:
    log_src = []
    log_path = []
    log_define = []
    
    log_path += [cwd + 'libraries/log']
    log_path += [cwd + 'libraries/log/src']

    log_src += [cwd + 'libraries/log/src/nrf_log_frontend.c']
    log_src += [cwd + 'libraries/log/src/nrf_log_str_formatter.c']
    if GetDepend('USING_NRF_LOG_BACKEND_FLASH') == True:
        log_src += [cwd + 'libraries/log/src/nrf_log_backend_flash.c']
        log_define += ['NRF_LOG_BACKEND_FLASH_ENABLED']
        lib_path += [cwd + 'libraries/queue']
        lib_src += [cwd + 'libraries/queue/nrf_queue.c']
    if GetDepend('USING_NRF_LOG_BACKEND_RTT') == True:
        log_src += [cwd + 'libraries/log/src/nrf_log_backend_rtt.c']	
        log_src += [cwd + 'libraries/log/src/nrf_log_backend_serial.c']
        log_src += [cwd + 'libraries/log/src/nrf_log_default_backends.c']
        lib_path += [cwd + 'libraries/delay']
        log_define += ['NRF_LOG_BACKEND_RTT_ENABLED']
    if GetDepend('USING_NRF_LOG_BACKEND_RT_SERIAL') == True:
        log_src += [cwd + 'libraries/log/src/nrf_log_backend_serial.c']
        log_src += ['./rtthread_adapter/nrf_log_backend_rt_device.c']
        lib_path += [GetCurrentDir() + '/rtthread_adapter']
    nrf_log = DefineGroup('nrf_log', log_src, depend = [''], CPPPATH = log_path, CPPDEFINES = log_define)

nrf_lib = DefineGroup('nrf_lib', lib_src, depend = [''], CPPPATH = lib_path, CPPDEFINES = lib_define)

if GetDepend('BSP_USING_SOFTDEVICE') == True:
    # ble
    ble_src = []
    ble_path = []
    ble_define = []
    
    #common
    ble_src += Glob(cwd + 'ble/common/*.c')    
    ble_path += [cwd + 'ble/common/']
    
    #ble_advertise
    ble_src += [cwd + 'ble/ble_advertising/ble_advertising.c']
    ble_path += [cwd + 'ble/ble_advertising']
    
    #ble_gatt
    ble_src += [cwd + 'ble/nrf_ble_gatt/nrf_ble_gatt.c']
    ble_path += [cwd + 'ble/nrf_ble_gatt']    
    
    #ble_qwr    
    ble_src += [cwd + 'ble/nrf_ble_qwr/nrf_ble_qwr.c']
    ble_path += [cwd + 'ble/nrf_ble_qwr']
    
    nrf_ble = DefineGroup('nrf_ble', ble_src, depend = [''], CPPPATH = ble_path, CPPDEFINES = ble_define)
    
    #softdevice
    softdev_src = []
    softdev_path = []
    softdev_define = []
    softdev_src += [cwd + 'softdevice/common/nrf_sdh.c']
    softdev_src += [cwd + 'softdevice/common/nrf_sdh_ble.c']
    softdev_src += [cwd + 'softdevice/common/nrf_sdh_soc.c']    
    softdev_path += [cwd + 'softdevice/common']
    softdev_path += [cwd + 'softdevice/s132/headers']
    softdev_path += [cwd + 'softdevice/s132/headers/nrf52']
    softdev_define += ['SOFTDEVICE_PRESENT']
    softdev_define += ['NRF52_PAN_74']
    softdev_define += ['__HEAP_SIZE=8192']
    softdev_define += ['__STACK_SIZE=8192']
    softdev_define += ['NRF_SD_BLE_API_VERSION_8']
    softdev_define += ['S132']
    
    nrf_softdev = DefineGroup('nrf_softdev', softdev_src, depend = [''], CPPPATH = softdev_path, CPPDEFINES = softdev_define)

Return('nrf_hal')
Return('nrf_drivers')
Return('nrf_lib')
if GetDepend('USING_NRF_LOG') == True:
    Return('nrf_log')
if GetDepend('BSP_USING_SOFTDEVICE') == True:
    Return('nrf_ble')
    Return('nrf_softdev')